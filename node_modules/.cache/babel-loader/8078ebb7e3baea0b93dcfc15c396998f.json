{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\savo\\\\Documents\\\\sg\\\\React\\\\low_high_game\\\\src\\\\ListOfCars.jsx\";\nimport React from 'react';\n\nclass ListOfCards extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      deck_id: localStorage.getItem(\"deck_id\"),\n      passed_cards: [],\n      bet: 10,\n      points: 100\n    };\n    this.lower_bet = this.lower_bet.bind(this);\n    this.compareCards = this.compareCards.bind(this);\n  }\n\n  componentDidMount() {\n    this.get_new_deck();\n  }\n\n  get_new_deck() {\n    if (this.state.deck_id == null) {\n      fetch(\"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\").then(res => res.json()).then(result => {\n        localStorage.setItem(\"deck_id\", result.deck_id);\n        this.setState({\n          passed_cards: [],\n          deck_id: result.deck_id\n        }, function () {\n          this.draw_a_card();\n        });\n      }, err => {\n        console.log(err);\n      });\n    } else {\n      fetch(\"https://deckofcardsapi.com/api/deck/\" + this.state.deck_id + \"/shuffle/\").then(res => res.json()).then(result => {\n        //console.log(result.deck_id);\n        this.setState({\n          deck_id: result.deck_id\n        }, function () {\n          this.draw_a_card();\n        });\n      }, err => {\n        console.log(err);\n      });\n    }\n  }\n\n  async draw_a_card() {\n    let card = null;\n    let url = \"https://deckofcardsapi.com/api/deck/\" + this.state.deck_id + \"/draw/?count=1\";\n    await fetch(url).then(res => res.json()).then(result => {\n      //console.log(result);\n      this.setState(prevStete => ({\n        passed_cards: [...prevStete.passed_cards, result.cards[0]]\n      }), function () {\n        card = result.cards[0];\n      });\n    }, err => {\n      console.log(err);\n    });\n    return card;\n  }\n\n  async lower_bet(e) {\n    let last_card = this.state.passed_cards[this.state.passed_cards.length - 1];\n    let current_card = await this.draw_a_card(); //console.log(current_card);\n    //console.log(last_card);\n    //console.log(this.state.passed_cards);\n\n    let response = this.compareCards(last_card, current_card); //console.log(response);\n\n    if (response === \"<\") {// console.log(\"Correct!\")\n    } else if (response === \">\") {// console.log(\"Wrong!\")\n    } else {//console.log(\"Correct!\")\n      }\n  }\n\n  compareCards(last, current) {\n    let last_card_value, current_card_value;\n\n    switch (current.value) {\n      case \"ACE\":\n        current_card_value = 11;\n        break;\n\n      case \"KING\":\n        current_card_value = 14;\n        break;\n\n      case \"JACK\":\n        current_card_value = 12;\n        break;\n\n      case \"QUEEN\":\n        current_card_value = 13;\n        break;\n\n      default:\n        current_card_value = current.value;\n    }\n\n    switch (last.value) {\n      case \"ACE\":\n        last_card_value = 11;\n        break;\n\n      case \"KING\":\n        last_card_value = 14;\n        break;\n\n      case \"JACK\":\n        last_card_value = 12;\n        break;\n\n      case \"QUEEN\":\n        last_card_value = 13;\n        break;\n\n      default:\n        last_card_value = last.value;\n    }\n\n    if (current_card_value > last_card_value) return \">\";else if (current_card_value < last_card_value) return \"<\";else return \"=\";\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }\n    }, this.state.passed_cards.map(function (item, i) {\n      return /*#__PURE__*/React.createElement(\"img\", {\n        src: item.image,\n        key: i,\n        alt: item.code,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 32\n        }\n      });\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.lower_bet,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }\n    }, \"Lower\"));\n  }\n\n}\n\nexport default ListOfCards;","map":{"version":3,"sources":["C:/Users/savo/Documents/sg/React/low_high_game/src/ListOfCars.jsx"],"names":["React","ListOfCards","Component","constructor","state","deck_id","localStorage","getItem","passed_cards","bet","points","lower_bet","bind","compareCards","componentDidMount","get_new_deck","fetch","then","res","json","result","setItem","setState","draw_a_card","err","console","log","card","url","prevStete","cards","e","last_card","length","current_card","response","last","current","last_card_value","current_card_value","value","render","map","item","i","image","code"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass ListOfCards extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            deck_id : localStorage.getItem(\"deck_id\"),\r\n            passed_cards:[],\r\n             bet: 10,\r\n            points : 100\r\n        }\r\n        this.lower_bet = this.lower_bet.bind(this);\r\n        this.compareCards = this.compareCards.bind(this);\r\n    }\r\n    componentDidMount(){\r\n        this.get_new_deck();\r\n        \r\n        \r\n    }\r\n    get_new_deck(){\r\n        \r\n       if(this.state.deck_id==null){\r\n        fetch(\"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\")\r\n        .then(res=>res.json())\r\n        .then((result) =>{\r\n            \r\n            localStorage.setItem(\"deck_id\",result.deck_id);\r\n            this.setState({\r\n                passed_cards : [],  \r\n                deck_id : result.deck_id\r\n            },function(){\r\n                this.draw_a_card();        \r\n            })\r\n            \r\n        },\r\n        (err)=>{\r\n            console.log(err);\r\n        })\r\n       } else{\r\n           \r\n        fetch(\"https://deckofcardsapi.com/api/deck/\"+this.state.deck_id+\"/shuffle/\")\r\n        .then(res=>res.json())\r\n        .then((result) =>{\r\n            //console.log(result.deck_id);\r\n            this.setState({\r\n                \r\n                deck_id : result.deck_id\r\n            },function(){\r\n                this.draw_a_card();        \r\n            })\r\n            \r\n        },\r\n        (err)=>{\r\n            console.log(err);\r\n        })\r\n       }\r\n        \r\n    }\r\n    async draw_a_card(){\r\n        let card  = null;\r\n        let url  = \"https://deckofcardsapi.com/api/deck/\"+this.state.deck_id+\"/draw/?count=1\";\r\n      await fetch(url)\r\n        .then(res => res.json())\r\n        .then(result =>{\r\n            //console.log(result);\r\n            \r\n            this.setState(prevStete =>({\r\n                passed_cards : [...prevStete.passed_cards,result.cards[0]]\r\n            }), function(){\r\n                card = result.cards[0];\r\n            })\r\n        },\r\n        err =>{\r\n            console.log(err);\r\n        });\r\n        \r\n        return card;\r\n    }\r\n\r\n     async lower_bet (e){\r\n        let last_card = this.state.passed_cards[this.state.passed_cards.length-1];\r\n      let current_card = await this.draw_a_card();\r\n       \r\n       //console.log(current_card);\r\n       //console.log(last_card);\r\n       //console.log(this.state.passed_cards);\r\n       let response  = this.compareCards(last_card,current_card);\r\n        //console.log(response);\r\n       if(response===\"<\"){\r\n          // console.log(\"Correct!\")\r\n       }else if (response===\">\"){\r\n       // console.log(\"Wrong!\")\r\n       }else{\r\n        //console.log(\"Correct!\")\r\n       }\r\n        \r\n\r\n         \r\n    }\r\n\r\n    compareCards(last,current){\r\n\r\n        let last_card_value,current_card_value;\r\n        switch(current.value){\r\n            case \"ACE\":\r\n                current_card_value = 11;\r\n                break; \r\n            case \"KING\":\r\n                current_card_value = 14;\r\n                break;  \r\n            case \"JACK\":\r\n                current_card_value = 12;\r\n                break;\r\n            case \"QUEEN\":\r\n                    current_card_value = 13;\r\n                    break;\r\n            default :\r\n            current_card_value = current.value;   \r\n        }\r\n        switch(last.value){\r\n            case \"ACE\":\r\n                last_card_value = 11;\r\n                break; \r\n            case \"KING\":\r\n                last_card_value = 14;\r\n                break;  \r\n            case \"JACK\":\r\n                last_card_value = 12;\r\n                break;\r\n            case \"QUEEN\":\r\n                last_card_value = 13;\r\n                    break;\r\n            default :\r\n            last_card_value = last.value;   \r\n        }\r\n\r\n        if(current_card_value>last_card_value)return \">\"\r\n        else if(current_card_value<last_card_value)return \"<\"\r\n        else return \"=\";\r\n\r\n    }\r\n\r\n    \r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div>\r\n                    {this.state.passed_cards.map(function(item, i){\r\n                       \r\n                        return <img src = {item.image} key={i} alt={item.code}/>\r\n                 })}\r\n                </div>\r\n                \r\n\r\n                <button onClick={this.lower_bet}>Lower</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default ListOfCards;\r\n"]},"metadata":{},"sourceType":"module"}